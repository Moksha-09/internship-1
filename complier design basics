#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

#define MAX_LEN 100

// List of C keywords for comparison
const char *keywords[] = {
    "int", "float", "char", "double", "if", "else", "for", "while", "return",
    "void", "static", "break", "continue", "do", "switch", "case", "default", "long", "short"
};
int keywordCount = sizeof(keywords) / sizeof(keywords[0]);

// Check if a given word is a keyword
int isKeyword(const char *word) {
    for (int i = 0; i < keywordCount; i++) {
        if (strcmp(word, keywords[i]) == 0) {
            return 1;
        }
    }
    return 0;
}

// Check if a character is a valid operator
int isOperator(char ch) {
    return ch == '+' || ch == '-' || ch == '*' || ch == '/' ||
           ch == '=' || ch == '<' || ch == '>' || ch == '!';
}

int main() {
    FILE *fp;
    char filename[100];
    char ch, buffer[MAX_LEN];
    int i = 0;

    printf("Enter input filename: ");
    scanf("%s", filename);

    fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("Error opening file.\n");
        return 1;
    }

    printf("\nLexical Analysis Output:\n");

    while ((ch = fgetc(fp)) != EOF) {
        if (isalnum(ch) || ch == '_') {
            buffer[i++] = ch;
        } else {
            buffer[i] = '\0';
            if (i > 0) {
                if (isKeyword(buffer)) {
                    printf("Keyword: %s\n", buffer);
                } else {
                    printf("Identifier: %s\n", buffer);
                }
                i = 0;
            }

            if (isOperator(ch)) {
                char next = fgetc(fp);
                if (next == '=' || (ch == '+' && next == '+') || (ch == '-' && next == '-')) {
                    printf("Operator: %c%c\n", ch, next);
                } else {
                    printf("Operator: %c\n", ch);
                    ungetc(next, fp); // Put the extra character back
                }
            }
        }
    }

    // Handle last token if file ends after identifier
    buffer[i] = '\0';
    if (i > 0) {
        if (isKeyword(buffer)) {
            printf("Keyword: %s\n", buffer);
        } else {
            printf("Identifier: %s\n", buffer);
        }
    }

    fclose(fp);
    return 0;
}





sample output:

Keyword: int
Identifier: main
Keyword: int
Identifier: a
Operator: =
Identifier: b
Keyword: float
Identifier: b
Operator: =
Identifier: if
Identifier: a
Operator: <
Identifier: b
Identifier: a
Operator: =
Identifier: a
Operator: +
Identifier: b
Keyword: return
Identifier: 0
